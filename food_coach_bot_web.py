import os
import io
import re
import base64

from fastapi import FastAPI, Request
from dotenv import load_dotenv
from PIL import Image
import openai
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")
PORT           = int(os.getenv("PORT", 8000))

openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_TOKEN)

# === FastAPI app ===
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "Bot is running"}

@app.post("/", status_code=200)
async def telegram_webhook(req: Request):
    data = await req.json()
    try:
        upd = Update.de_json(data, bot)
        await application.initialize()
        await application.process_update(upd)
        await application.bot.initialize()
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ webhook handler:", e)
        import traceback; traceback.print_exc()
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AI-–±–æ—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ –Ω–∞ 100 –≥.\n"
        "–ü–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    fobj  = await photo.get_file()
    bio   = io.BytesIO()
    await fobj.download_to_memory(out=bio)

    img = Image.open(bio).convert("RGB")
    buf = io.BytesIO()
    img.save(buf, format="JPEG")
    img_b64 = base64.b64encode(buf.getvalue()).decode()

    await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")

from openai import OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

response = client.chat.completions.create(
    model="gpt-4o",
    messages=[
        {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é..."},
        {"role": "user", "content": [
            {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}},
            {"type": "text", "text": "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?"}
        ]}
    ],
    temperature=0.2,
    max_tokens=200
)


    reply = response.choices[0].message.content

    name = re.search(r"1\\.\s*(.+)", reply)
    cal  = re.search(r"–∫–∞–ª–æ—Ä–∏–∏\D*(\d+)", reply.lower())
    prot = re.search(r"–±–µ–ª–∫–∏\D*(\d+)", reply.lower())
    fat  = re.search(r"–∂–∏—Ä—ã\D*(\d+)", reply.lower())
    carb = re.search(r"—É–≥–ª–µ–≤–æ–¥—ã\D*(\d+)", reply.lower())

    dish = name.group(1).strip() if name else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    cal   = cal.group(1) if cal else "‚Äî"
    prot  = prot.group(1) if prot else "‚Äî"
    fat   = fat.group(1) if fat else "‚Äî"
    carb  = carb.group(1) if carb else "‚Äî"

    await update.message.reply_text(
        f"üçΩ –ë–ª—é–¥–æ: {dish}\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {cal} –∫–∫–∞–ª / 100 –≥\n"
        f"ü•© –ë–µ–ª–∫–∏: {prot} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {fat} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥"
    )

# === –°–±–æ—Ä–∫–∞ ApplicationBuilder ===
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# === –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Uvicorn ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("food_coach_bot_web:app", host="0.0.0.0", port=PORT)
