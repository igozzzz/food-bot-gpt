import os
import io
import re
import base64

from fastapi import FastAPI, Request
from dotenv import load_dotenv
from PIL import Image
import openai
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")    # https://<your-render-domain>.onrender.com/
PORT           = int(os.getenv("PORT", 8000))

openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_TOKEN)

# === FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI()

# --- –ü—Ä–æ—Å—Ç–æ–π GET –¥–ª—è health check ---
@app.get("/")
async def root():
    return {"status": "Bot is running"}

# === Telegram ApplicationBuilder –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
application = ApplicationBuilder() \
    .token(TELEGRAM_TOKEN) \
    .build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –∏ –≤—ã–¥–∞–º –ö–ë–ñ–£ –Ω–∞ 100 –≥."
    )

from openai import OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# updated photo handling

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    fobj = await photo.get_file()
    bio = io.BytesIO()
    await fobj.download_to_memory(out=bio)

    img = Image.open(bio).convert("RGB")
    buf = io.BytesIO()
    img.save(buf, format="JPEG")
    img_b64 = base64.b64encode(buf.getvalue()).decode()

    await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –ø–æ —à–∞–±–ª–æ–Ω—É:\n"
                               "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
                               "2. –ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥\n"
                               "3. –ë–µ–ª–∫–∏, –ñ–∏—Ä—ã, –£–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥\n"
                               "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}},
                        {"type": "text", "text": "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?"}
                    ]
                }
            ],
            max_tokens=400
        )

        text = response.choices[0].message.content

        name = re.search(r"1\.\s*(.+)", text)
        cal  = re.search(r"(\d+)[^\d]*–∫–∫–∞–ª", text.lower())
        prot = re.search(r"–±–µ–ª–∫.*?(\d+)", text.lower())
        fat  = re.search(r"–∂–∏—Ä.*?(\d+)", text.lower())
        carb = re.search(r"—É–≥–ª–µ–≤–æ–¥.*?(\d+)", text.lower())

        dish = name.group(1).strip() if name else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
        cal  = cal.group(1) if cal else "‚Äî"
        prot = prot.group(1) if prot else "‚Äî"
        fat  = fat.group(1) if fat else "‚Äî"
        carb = carb.group(1) if carb else "‚Äî"

        await update.message.reply_text(
            f"üçΩ –ë–ª—é–¥–æ: {dish}\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {cal} –∫–∫–∞–ª / 100 –≥\n"
            f"ü•© –ë–µ–ª–∫–∏: {prot} –≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {fat} –≥\n"
            f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥"
        )

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ.")
        print("–û—à–∏–±–∫–∞ OpenAI:", e)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# === Webhook endpoint ===
@app.post("/", status_code=200)
async def telegram_webhook(req: Request):
    data = await req.json()
    try:
        upd = Update.de_json(data, bot)
        await application.process_update(upd)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ webhook handler:", e)
        import traceback; traceback.print_exc()
    return {"ok": True}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await application.initialize()
    await bot.set_webhook(WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

# === –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Uvicorn ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("food_coach_bot_web:app", host="0.0.0.0", port=PORT)
