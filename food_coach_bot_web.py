import os
import io
import base64
import re
from fastapi import FastAPI, Request
from dotenv import load_dotenv
from PIL import Image
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8000))

bot = Bot(token=TELEGRAM_TOKEN)
openai = OpenAI(api_key=OPENAI_API_KEY)

# === FastAPI app ===
app = FastAPI()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application ===
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥.\n\nüì∏ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã, –∏ —è –ø–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å, –ë–ñ–£ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    buf = io.BytesIO()
    await file.download_to_memory(buf)
    img = Image.open(buf).convert("RGB")
    img_io = io.BytesIO()
    img.save(img_io, format="JPEG")
    img_base64 = base64.b64encode(img_io.getvalue()).decode()

    await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –û–ø—Ä–µ–¥–µ–ª–∏:\n"
                    "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
                    "2. –ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥\n"
                    "3. –ë–µ–ª–∫–∏, –ñ–∏—Ä—ã, –£–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥\n"
                    "–§–æ—Ä–º–∞—Ç: –∫—Ä–∞—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ."
                )
            },
            {
                "role": "user",
                "content": [
                    {
                        "type": "image_url",
                        "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}
                    },
                    {"type": "text", "text": "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?"}
                ]
            }
        ],
        temperature=0.2,
        max_tokens=300,
    )

    reply = response.choices[0].message.content
    name = re.search(r"1\..*?(.+)", reply)
    cal = re.search(r"–∫–∞–ª–æ—Ä–∏–∏.*?(\d+)", reply.lower())
    prot = re.search(r"–±–µ–ª–∫\w*.*?(\d+)", reply.lower())
    fat = re.search(r"–∂–∏—Ä\w*.*?(\d+)", reply.lower())
    carb = re.search(r"—É–≥–ª–µ–≤–æ–¥\w*.*?(\d+)", reply.lower())

    dish = name.group(1).strip() if name else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    cal = cal.group(1) if cal else "‚Äî"
    prot = prot.group(1) if prot else "‚Äî"
    fat = fat.group(1) if fat else "‚Äî"
    carb = carb.group(1) if carb else "‚Äî"

    await update.message.reply_text(
        f"üçΩ –ë–ª—é–¥–æ: {dish}\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {cal} –∫–∫–∞–ª / 100 –≥\n"
        f"ü•© –ë–µ–ª–∫–∏: {prot} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {fat} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥"
    )

# === –†–æ—É—Ç—ã ===
@app.get("/")
async def root():
    return {"status": "Bot is running"}

@app.post("/", status_code=200)
async def telegram_webhook(req: Request):
    data = await req.json()
    try:
        update = Update.de_json(data, bot)
        await application.process_update(update)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", e)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# === –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("food_coach_bot_web:app", host="0.0.0.0", port=PORT)
