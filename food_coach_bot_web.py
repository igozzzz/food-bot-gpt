import os, io, json, base64, logging
from typing import Any
import httpx, uvicorn
from dotenv import load_dotenv
from PIL import Image
from fastapi import FastAPI, Request
from telegram import Update, Bot, File
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("food_bot")

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL     = os.getenv("WEBHOOK_URL")
PORT            = int(os.getenv("PORT", 8000))
MAX_FILE_SIZE   = 10 * 1024 * 1024

if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, WEBHOOK_URL]):
    raise RuntimeError("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å TELEGRAM_TOKEN, OPENAI_API_KEY, WEBHOOK_URL")

bot         = Bot(token=TELEGRAM_TOKEN)
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app         = FastAPI()

import openai
openai_client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY,
                                   http_client=httpx.AsyncClient(timeout=30.0))

async def analyse_image(img_b64: str) -> dict[str, Any]:
    resp = await openai_client.chat.completions.create(
        model="gpt-4o",
        response_format="json",
        temperature=0.2,
        max_tokens=200,
        messages=[
            {"role": "system",
             "content": (
                 "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏ "
                 "–≤–µ—Ä–Ω–∏ JSON-–æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏: dish, calories, protein, fat, carbs. "
                 "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏ (—Ü–µ–ª—ã–µ –∏–ª–∏ —Å –æ–¥–Ω–æ–π —Ü–∏—Ñ—Ä–æ–π –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π), "
                 "–≤ –≥—Ä–∞–º–º–∞—Ö –∏ –∫–∫–∞–ª –Ω–∞ 100 –≥. "
                 "–ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´150‚Äì180¬ª."
             )},
            {"role": "user",
             "content": [
                 {"type": "image_url",
                  "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}}},
                 {"type": "text",
                  "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –±–ª—é–¥–æ –∏ –¥–∞–π –ö–ë–ñ–£ –Ω–∞ 100 –≥."},
             ]},
        ],
    )
    return json.loads(resp.choices[0].message.content)

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî —Å–∫–∞–∂—É –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ö–ë–ñ–£ –Ω–∞ 100 –≥."
    )
    log.info(f"User {update.effective_user.id} started bot")

async def handle_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        photo = update.message.photo[-1]
        if photo.file_size and photo.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ > 10 –ú–ë. –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ–º–µ–Ω—å—à–µ.")
            return

        tg_file: File = await photo.get_file()
        buf = io.BytesIO()
        await tg_file.download_to_memory(out=buf)
        raw = buf.getvalue()

        img = Image.open(io.BytesIO(raw)).convert("RGB")
        buf = io.BytesIO()
        img.save(buf, format="JPEG", quality=85)
        img_b64 = base64.b64encode(buf.getvalue()).decode()

        await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ‚Ä¶")
        log.info(f"üîç HANDLE_PHOTO: calling analyse_image() for {update.effective_user.id}")

        try:
            data = await analyse_image(img_b64)
        except Exception as e:
            log.error("OpenAI error", exc_info=True)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë.")
            return

        dish = data.get("dish", "‚Äî")
        cal  = data.get("calories", "‚Äî")
        p    = data.get("protein", "‚Äî")
        f    = data.get("fat", "‚Äî")
        c    = data.get("carbs", "‚Äî")

        await update.message.reply_text(
            f"üçΩ {dish}\n"
            f"üî• {cal} –∫–∫–∞–ª / 100 –≥\n"
            f"ü•© {p} –≥   ü•ë {f} –≥   üçû {c} –≥"
        )
        log.info(f"‚úÖ Result sent to {update.effective_user.id}: {data}")

    except Exception as e:
        log.error("Handle photo error", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.")

application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

@app.post("/", status_code=200)
async def telegram_webhook(req: Request) -> dict:
    data = await req.json()
    if not getattr(application, "_initialized", False):
        await application.initialize()
    upd = Update.de_json(data, application.bot)
    await application.process_update(upd)
    return {"ok": True}

@app.get("/")
async def root() -> dict:
    return {"status": "alive"}

@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    log.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await application.shutdown()
    log.info("Webhook —É–¥–∞–ª—ë–Ω, –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    uvicorn.run("food_coach_bot_web:app", host="0.0.0.0", port=PORT)
