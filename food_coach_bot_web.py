"""
–ü—Ä–æ—Å—Ç–æ–π Telegram-–±–æ—Ç: –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ + –ö–ë–ñ–£ –Ω–∞ 100 –≥.
–†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook (FastAPI ‚Üí Render/Vercel/Fly –∏ —Ç.–ø.).

‚öôÔ∏è  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (requirements.txt)
---------------------------------
fastapi
uvicorn
python-telegram-bot==21.4
openai>=1.2.0           # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω ‚â•1.2 –¥–ª—è response_format
httpx
pillow
python-dotenv
"""

import os
import io
import json
import base64
import logging
from typing import Any

import httpx
import uvicorn
from dotenv import load_dotenv
from fastapi import FastAPI, Request, HTTPException
from PIL import Image
from telegram import Update, Bot
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters,
)
from openai import AsyncOpenAI

# ---------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ------------------------------------------------------------------
load_dotenv()  # –±–µ—Ä—ë–º TELEGRAM_TOKEN, OPENAI_API_KEY, WEBHOOK_URL, PORT –∏–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")      # https://‚Ä¶/  (HTTPS –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!)
PORT           = int(os.getenv("PORT", 8000))  # Render –ø–µ—Ä–µ–¥–∞—ë—Ç PORT env

if not all((TELEGRAM_TOKEN, OPENAI_API_KEY, WEBHOOK_URL)):
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN / OPENAI_API_KEY / WEBHOOK_URL")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("food_bot")

# ---------- Telegram & OpenAI ------------------------------------------------------------------
bot         = Bot(token=TELEGRAM_TOKEN)
application: Application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
openai_cli  = AsyncOpenAI(api_key=OPENAI_API_KEY)

MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 –ú–ë

# ---------- Telegram-handlers ------------------------------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥.\n\n"
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∞ —è –Ω–∞–∑–æ–≤—É –µ–≥–æ –∏ –¥–∞–º –ö–ë–ñ–£ (–Ω–∞ 100 –≥)."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        if not update.message or not update.message.photo:
            return

        tg_photo = update.message.photo[-1]
        if tg_photo.file_size and tg_photo.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 10 –ú–ë).")
            return

        file = await tg_photo.get_file()
        raw: bytes = await file.download_as_bytes()          # PTB v21

        # ---> base64-–∫–æ–¥–∏—Ä—É–µ–º –¥–ª—è image_url
        with Image.open(io.BytesIO(raw)).convert("RGB") as img:
            buf = io.BytesIO()
            img.save(buf, format="JPEG", quality=85)
            img_b64 = base64.b64encode(buf.getvalue()).decode()

        await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ‚Ä¶")

        # ---> –∑–∞–ø—Ä–æ—Å –∫ OpenAI (—Å—Ç—Ä–æ–≥–æ JSON)
        response = await openai_cli.chat.completions.create(
            model="gpt-4o-mini",          # –∏–ª–∏ gpt-4o, gpt-4o-audio-preview
            response_format={"type": "json_object"},
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –í–ï–†–ù–ò –¢–û–õ–¨–ö–û JSON –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "
                        "—Å –ø–æ–ª—è–º–∏: dish, calories, protein, fat, carbs. "
                        "calories/–±–∂–∫ ‚Äî –Ω–∞ 100 –≥. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî —Å—Ç–∞–≤—å \"‚Äî\"."
                    ),
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "image_url",
                         "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}},
                        {"type": "text",
                         "text": "–ß—Ç–æ —ç—Ç–æ –∑–∞ –±–ª—é–¥–æ –∏ –ö–ë–ñ–£ –Ω–∞ 100 –≥?"},
                    ],
                },
            ],
            temperature=0.2,
            max_tokens=200,
        )

        reply = response.choices[0].message.content.strip()
        data: dict[str, Any] = json.loads(reply)  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON

        await update.message.reply_text(
            f"üçΩ –ë–ª—é–¥–æ: {data.get('dish','‚Äî')}\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {data.get('calories','‚Äî')} –∫–∫–∞–ª / 100 –≥\n"
            f"ü•© –ë–µ–ª–∫–∏: {data.get('protein','‚Äî')} –≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {data.get('fat','‚Äî')} –≥\n"
            f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {data.get('carbs','‚Äî')} –≥"
        )

    except Exception as e:
        log.error("Handle photo error: %s", e, exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")

# —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# ---------- FastAPI (Webhook) ------------------------------------------------------------------
app = FastAPI()

@app.post("/", status_code=200)
async def telegram_webhook(req: Request):
    """–ü–æ–ª—É—á–∞–µ–º update –æ—Ç Telegram ‚Üí –ø–µ—Ä–µ–¥–∞—ë–º PTB."""
    data = await req.json()
    update = Update.de_json(data, bot)
    await application.process_update(update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "bot running"}

# ---------- –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª FastAPI -------------------------------------------------------------
@app.on_event("startup")
async def on_startup():
    await application.initialize()
    # –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook, —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(WEBHOOK_URL)
    log.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    await application.shutdown()
    log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ---------- –ª–æ–∫–∞–ª—å–Ω—ã–π/Render-—Å—Ç–∞—Ä—Ç -------------------------------------------------------------
if __name__ == "__main__":
    uvicorn.run("food_coach_bot_web:app", host="0.0.0.0", port=PORT)
