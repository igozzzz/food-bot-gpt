import os
import io
import base64
import re
from fastapi import FastAPI, Request
from dotenv import load_dotenv
from PIL import Image
import openai
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your-bot.onrender.com/
PORT = int(os.getenv("PORT", 8000))

openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_TOKEN)
app = FastAPI()

# === Telegram AppBuilder ===
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥.\n\n"
        "üì∏ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî –∏ —è –ø–æ–¥—Å–∫–∞–∂—É:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
        "‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –Ω–∞ 100 –≥\n\n"
        "–ì–æ—Ç–æ–≤? –ñ–¥—É —Ñ–æ—Ç–æ!"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    bio = io.BytesIO()
    await file.download_to_memory(out=bio)

    image = Image.open(bio).convert("RGB")
    buffer = io.BytesIO()
    image.save(buffer, format="JPEG")
    img_b64 = base64.b64encode(buffer.getvalue()).decode()

    await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": (
                    "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –ø–æ –ø—É–Ω–∫—Ç–∞–º:\n"
                    "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
                    "2. –ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥\n"
                    "3. –ë–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥\n"
                    "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                )},
                {"role": "user", "content": [
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}},
                    {"type": "text", "text": "–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ? –£–∫–∞–∂–∏ –ë–ñ–£ –∏ –∫–∞–ª–æ—Ä–∏–∏."}
                ]}
            ],
            temperature=0.3,
            max_tokens=300
        )

        reply = response.choices[0].message.content

        name = re.search(r"1\.\s*(.+)", reply)
        cal = re.search(r"–∫–∞–ª–ª?–æ—Ä[–∏–∏–µ—è].*?(\d+)", reply.lower())
        prot = re.search(r"–±–µ–ª–∫.*?(\d+)", reply.lower())
        fat = re.search(r"–∂–∏—Ä.*?(\d+)", reply.lower())
        carb = re.search(r"—É–≥–ª–µ–≤–æ–¥.*?(\d+)", reply.lower())

        dish = name.group(1).strip() if name else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
        cal = cal.group(1) if cal else "‚Äî"
        prot = prot.group(1) if prot else "‚Äî"
        fat = fat.group(1) if fat else "‚Äî"
        carb = carb.group(1) if carb else "‚Äî"

        await update.message.reply_text(
            f"üçΩ –ë–ª—é–¥–æ: {dish}\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {cal} –∫–∫–∞–ª / 100 –≥\n"
            f"ü•© –ë–µ–ª–∫–∏: {prot} –≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {fat} –≥\n"
            f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥"
        )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# === Webhook endpoint ===
@app.post("/", status_code=200)
async def telegram_webhook(req: Request):
    data = await req.json()
    try:
        await application.initialize()
        update = Update.de_json(data, bot)
        await application.process_update(update)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ webhook handler:", e)
    return {"ok": True}

# === Web UI Ping ===
@app.get("/")
async def root():
    return {"status": "bot running"}

@app.on_event("startup")
async def on_startup():
    await application.initialize()
    await bot.set_webhook(WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

# === –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ —á–µ—Ä–µ–∑ uvicorn ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("food_coach_bot_web:app", host="0.0.0.0", port=PORT)
