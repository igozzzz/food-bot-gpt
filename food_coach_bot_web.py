import os
import io
import re
import base64

from fastapi import FastAPI, Request
from pydantic import BaseModel
from dotenv import load_dotenv
from PIL import Image
import openai
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL    = os.getenv("WEBHOOK_URL")   # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com/
PORT           = int(os.getenv("PORT", "8000"))

openai.api_key = OPENAI_API_KEY
bot = Bot(token=TELEGRAM_TOKEN)

# === FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI()

# –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
@app.post("/", status_code=200)
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot)
    # –ø–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º
    await application.process_update(update)
    return {}

# –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

# === –í–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî —è –æ–ø—Ä–µ–¥–µ–ª—é, —á—Ç–æ —ç—Ç–æ, "
        "–∏ –≤—ã–¥–∞–º –ö–ë–ñ–£ –Ω–∞ 100 –≥."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    photo = update.message.photo[-1]
    fobj  = await photo.get_file()
    bio   = io.BytesIO()
    await fobj.download_to_memory(out=bio)

    # –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
    image  = Image.open(bio).convert("RGB")
    buff   = io.BytesIO()
    image.save(buff, format="JPEG")
    img_b64 = base64.b64encode(buff.getvalue()).decode()

    await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")

    # –≤—ã–∑—ã–≤–∞–µ–º GPT Vision
    resp = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role":"system","content":
             "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ö—Ä–∞—Ç–∫–æ –ø–æ —à–∞–±–ª–æ–Ω—É:\n"
             "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
             "2. –ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥\n"
             "3. –ë–µ–ª–∫–∏, –ñ–∏—Ä—ã, –£–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥\n"
             "–ù–∞ —Ä—É—Å—Å–∫–æ–º."},
            {"role":"user","content":[
                {"type":"image_url","image_url":{"url":f"data:image/jpeg;base64,{img_b64}"}},
                {"type":"text","text":"–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?"}
            ]}
        ],
        temperature=0.2,
        max_tokens=200
    )

    text = resp.choices[0].message.content

    # –ø–∞—Ä—Å–∏–º —Ä–µ–≥—É–ª—è—Ä–∫–∞–º–∏
    name = re.search(r"1\.\s*(.+)", text)
    cal  = re.search(r"(\d+)[^\d]*–∫–∫–∞–ª", text.lower())
    prot = re.search(r"–±–µ–ª–∫.*?(\d+)", text.lower())
    fat  = re.search(r"–∂–∏—Ä.*?(\d+)", text.lower())
    carb = re.search(r"—É–≥–ª–µ–≤–æ–¥.*?(\d+)", text.lower())

    dish = name.group(1).strip() if name else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    cal   = cal.group(1)  if cal  else "‚Äî"
    prot  = prot.group(1) if prot else "‚Äî"
    fat   = fat.group(1)  if fat  else "‚Äî"
    carb  = carb.group(1) if carb else "‚Äî"

    # –æ—Ç–≤–µ—á–∞–µ–º
    await update.message.reply_text(
        f"üçΩ –ë–ª—é–¥–æ: {dish}\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {cal} –∫–∫–∞–ª / 100 –≥\n"
        f"ü•© –ë–µ–ª–∫–∏: {prot} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {fat} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥"
    )

# === –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram ===
application = ApplicationBuilder()\
    .token(TELEGRAM_TOKEN)\
    .build()

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# === –ó–∞–ø—É—Å–∫ Uvicorn, –µ—Å–ª–∏ —Å—Ç–∞—Ä—Ç—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ ===
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("food_bot_webhook:app", host="0.0.0.0", port=PORT)
