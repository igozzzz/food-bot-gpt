import os
import io
import base64
import json
import logging
from fastapi import FastAPI, Request, HTTPException
from dotenv import load_dotenv
from PIL import Image
from openai import AsyncOpenAI
from telegram import Bot, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import uvicorn

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8000))
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 –ú–ë

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TELEGRAM_TOKEN, OPENAI_API_KEY, WEBHOOK_URL]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise EnvironmentError("TELEGRAM_TOKEN, OPENAI_API_KEY –∏–ª–∏ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω—ã")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –¥–ª—è WEBHOOK_URL
if not WEBHOOK_URL.startswith("https://"):
    logger.error("WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS")
    raise ValueError("WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
bot = Bot(token=TELEGRAM_TOKEN)
app = FastAPI()
client = AsyncOpenAI(
    api_key=OPENAI_API_KEY,
    http_client=None  # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é http_client –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
)
application = Application.builder().token(TELEGRAM_TOKEN).build()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥.\n\n"
        "üì∏ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî –∏ —è –ø–æ–¥—Å–∫–∞–∂—É:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
        "‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ –Ω–∞ 100 –≥\n\n"
        "–ì–æ—Ç–æ–≤? –ñ–¥—É —Ñ–æ—Ç–æ!"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        photo = update.message.photo[-1]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if photo.file_size > MAX_FILE_SIZE:
            await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë.")
            logger.warning(f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ—Ç {update.effective_user.id}: {photo.file_size} –±–∞–π—Ç")
            return

        file = await photo.get_file()
        bio = io.BytesIO()
        await file.download(out=bio)
        bio.seek(0)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with Image.open(bio).convert("RGB") as image:
            buffer = io.BytesIO()
            image.save(buffer, format="JPEG", quality=85)
            img_b64 = base64.b64encode(buffer.getvalue()).decode()

        await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç {update.effective_user.id}")

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å JSON-–æ—Ç–≤–µ—Ç–æ–º
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –µ–¥—ã –∏ –≤–µ—Ä–Ω–∏ JSON-–æ—Ç–≤–µ—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:\n"
                        "- dish: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (—Å—Ç—Ä–æ–∫–∞)\n"
                        "- calories: –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥ (—á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ '‚Äî' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)\n"
                        "- protein: –±–µ–ª–∫–∏ –Ω–∞ 100 –≥ (—á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ '‚Äî' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)\n"
                        "- fat: –∂–∏—Ä—ã –Ω–∞ 100 –≥ (—á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ '‚Äî' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)\n"
                        "- carbs: —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥ (—á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ '‚Äî' –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)\n"
                        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
                    ),
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}},
                        {"type": "text", "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ –µ–¥—ã."},
                    ],
                },
            ],
            temperature=0.3,
            max_tokens=300,
            response_format={"type": "json_object"},
        )

        # –ü–∞—Ä—Å–∏–Ω–≥ JSON-–æ—Ç–≤–µ—Ç–∞
        try:
            data = json.loads(response.choices[0].message.content)
            dish = data.get("dish", "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
            cal = data.get("calories", "‚Äî")
            prot = data.get("protein", "‚Äî")
            fat = data.get("fat", "‚Äî")
            carb = data.get("carbs", "‚Äî")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return

        await update.message.reply_text(
            f"üçΩ –ë–ª—é–¥–æ: {dish}\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {cal} –∫–∫–∞–ª / 100 –≥\n"
            f"ü•© –ë–µ–ª–∫–∏: {prot} –≥\n"
            f"ü•ë –ñ–∏—Ä—ã: {fat} –≥\n"
            f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥"
        )
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è {update.effective_user.id}: {dish}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è {update.effective_user.id}: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    finally:
        bio.close()

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# === Webhook endpoint ===
@app.post("/", status_code=200)
async def telegram_webhook(req: Request) -> dict:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram"""
    try:
        data = await req.json()
        update = Update.de_json(data, bot)
        if update:
            await application.process_update(update)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω webhook-–∑–∞–ø—Ä–æ—Å –æ—Ç {update.effective_user.id}")
        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π update")
        return {"ok": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook handler: {e}")
        return {"ok": False}

# === Web UI Ping ===
@app.get("/")
async def root() -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    return {"status": "bot running"}

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π FastAPI ===
@app.on_event("startup")
async def on_startup() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    try:
        await application.initialize()
        await application.bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")

@app.on_event("shutdown")
async def on_shutdown() -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    try:
        await application.bot.delete_webhook()
        await application.shutdown()
        logger.info("Webhook —É–¥–∞–ª–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == "__main__":
    uvicorn.run("food_coach_bot_web:app", host="0.0.0.0", port=PORT)