# food_coach_bot.py ‚Äî –ø–æ–ª–Ω—ã–π –∫–æ–¥ –¥–ª—è Telegram-–±–æ—Ç–∞-–¥–∏–µ—Ç–æ–ª–æ–≥–∞
import os
import io
import re
import base64
from PIL import Image
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
import openai

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

# --- States ---
GENDER, AGE, HEIGHT, WEIGHT, WAIST, HIPS, ACTIVITY, HABITS, GOAL, DIET = range(10)
user_profiles = {}
user_habits = {}
last_meal = {}

def scale(v, w): return round(v * w / 100, 1)

# --- –ê–Ω–∫–µ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["gender"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = int(update.message.text)
    await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["height"] = int(update.message.text)
    await update.message.reply_text("–í–µ—Å (–∫–≥):")
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["weight"] = int(update.message.text)
    await update.message.reply_text("–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    return WAIST

async def waist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["waist"] = update.message.text
    await update.message.reply_text("–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    return HIPS

async def hips(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["hips"] = update.message.text
    keyboard = [["–°–∏–¥—è—á–∏–π", "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"], ["–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]]
    await update.message.reply_text("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return ACTIVITY

async def activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["activity"] = update.message.text
    user_habits[update.effective_user.id] = []
    keyboard = [["–ö—É—Ä—é", "–ê–ª–∫–æ–≥–æ–ª—å"], ["–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫", "–î–∞–ª–µ–µ"]]
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return HABITS

async def habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text
    if text == "–î–∞–ª–µ–µ":
        context.user_data["habits"] = ", ".join(user_habits[uid]) or "–ù–µ—Ç"
        keyboard = [["–ü–æ—Ö—É–¥–µ—Ç—å", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"], ["–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–£–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ"]]
        await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
        return GOAL
    if text == "–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫":
        user_habits[uid] = ["–ù–µ—Ç"]
    elif text not in user_habits[uid]:
        user_habits[uid].append(text)
    await update.message.reply_text(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: {', '.join(user_habits[uid])}
–î–æ–±–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ '–î–∞–ª–µ–µ'")
    return HABITS

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text
    keyboard = [["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"], ["–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞", "–í–µ–≥–∞–Ω—Å—Ç–≤–æ"], ["–ü–æ—Å—Ç", "–ê–ª–ª–µ—Ä–≥–∏–∏"]]
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –µ–¥–µ?", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return DIET

async def diet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["diet"] = update.message.text
    user_id = update.effective_user.id
    d = context.user_data
    bmr = 10*d["weight"] + 6.25*d["height"] - 5*d["age"] + (5 if d["gender"].startswith("–ú") else -161)
    factor = {"—Å–∏–¥—è—á–∏–π": 1.2, "–ª–µ–≥–∫–∞—è": 1.375, "—Å—Ä–µ–¥–Ω—è—è": 1.55, "–≤—ã—Å–æ–∫–∞—è": 1.725}
    tdee = round(bmr * factor.get(d["activity"].split()[0].lower(), 1.2))
    if "–ø–æ—Ö—É–¥" in d["goal"].lower(): tdee -= 300
    elif "–º–∞—Å" in d["goal"].lower(): tdee += 300
    prot = round(d["weight"] * 1.6)
    fat = round(d["weight"] * 0.9)
    carb = round((tdee - prot*4 - fat*9)/4)
    user_profiles[user_id] = {"profile": d, "norma": {"cal": tdee, "protein": prot, "fat": fat, "carb": carb}}
    await update.message.reply_text(
        f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {tdee} –∫–∫–∞–ª
ü•© –ë–µ–ª–∫–∏: {prot} –≥
ü•ë –ñ–∏—Ä—ã: {fat} –≥
üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥

"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
    )
    return ConversationHandler.END
