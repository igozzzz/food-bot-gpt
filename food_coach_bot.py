import os
import io
import re
import base64
from PIL import Image
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∫–µ—Ç—ã
GENDER, AGE, HEIGHT, WEIGHT, WAIST, HIPS, ACTIVITY, HABITS, GOAL, DIET = range(10)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
user_profiles = {}
user_habits = {}
last_meal = {}

# –£—Ç–∏–ª–∏—Ç–∞ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –ö–ë–ñ–£ –ø–æ –≤–µ—Å—É
def scale(value: float, weight: int) -> float:
    return round(value * weight / 100, 1)

# --- –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AI‚Äë–¥–∏–µ—Ç–æ–ª–æ–≥. –í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=markup)
    return GENDER

async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["gender"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=ReplyKeyboardRemove())
    return AGE

async def age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = int(update.message.text)
    await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
    return HEIGHT

async def height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["height"] = int(update.message.text)
    await update.message.reply_text("–í–µ—Å (–∫–≥):")
    return WEIGHT

async def weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["weight"] = int(update.message.text)
    await update.message.reply_text("–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    return WAIST

async def waist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["waist"] = update.message.text
    await update.message.reply_text("–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    return HIPS

async def hips(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["hips"] = update.message.text
    keyboard = [["–°–∏–¥—è—á–∏–π", "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"], ["–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=markup)
    return ACTIVITY

async def activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["activity"] = update.message.text
    uid = update.effective_user.id
    user_habits[uid] = []
    keyboard = [["–ö—É—Ä—é", "–ê–ª–∫–æ–≥–æ–ª—å"], ["–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫", "–î–∞–ª–µ–µ"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏?", reply_markup=markup)
    return HABITS

async def habits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text
    if text == "–î–∞–ª–µ–µ":
        context.user_data["habits"] = ", ".join(user_habits[uid]) or "–ù–µ—Ç"
        keyboard = [["–ü–æ—Ö—É–¥–µ—Ç—å", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å"], ["–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É", "–£–ª—É—á—à–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ"]]
        markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=markup)
        return GOAL
    if text == "–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫":
        user_habits[uid] = ["–ù–µ—Ç"]
    elif text not in user_habits[uid]:
        user_habits[uid].append(text)
    # –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await update.message.reply_text(
        f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ: {', '.join(user_habits[uid])}\n–î–æ–±–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ \"–î–∞–ª–µ–µ\""
    )
    return HABITS

async def goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goal"] = update.message.text
    keyboard = [["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"], ["–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞", "–í–µ–≥–∞–Ω—Å—Ç–≤–æ"], ["–ü–æ—Å—Ç", "–ê–ª–ª–µ—Ä–≥–∏–∏"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –µ–¥–µ?", reply_markup=markup)
    return DIET

async def diet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["diet"] = update.message.text
    uid = update.effective_user.id
    d = context.user_data
    # BMR –∏ TDEE
    bmr = 10*d["weight"] + 6.25*d["height"] - 5*d["age"] + (5 if d["gender"].startswith("–ú") else -161)
    factor_map = {"—Å–∏–¥—è—á–∏–π":1.2, "–ª–µ–≥–∫–∞—è":1.375, "—Å—Ä–µ–¥–Ω—è—è":1.55, "–≤—ã—Å–æ–∫–∞—è":1.725}
    activity_key = d["activity"].split()[0].lower()
    tdee = round(bmr * factor_map.get(activity_key, 1.2))
    if "–ø–æ—Ö—É–¥" in d["goal"].lower():
        tdee -= 300
    elif "–º–∞—Å" in d["goal"].lower():
        tdee += 300
    protein = round(d["weight"] * 1.6)
    fat = round(d["weight"] * 0.9)
    carbs = round((tdee - (protein*4 + fat*9)) / 4)
    user_profiles[uid] = {"profile": d, "norma": {"cal":tdee, "protein":protein, "fat":fat, "carb":carbs}}
    await update.message.reply_text(
        f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {tdee} –∫–∫–∞–ª\n"
        f"ü•© –ë–µ–ª–∫–∏: {protein} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {fat} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
    )
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    photo = update.message.photo[-1]
    file = await photo.get_file()
    bio = io.BytesIO()
    await file.download_to_memory(out=bio)
    image = Image.open(bio).convert("RGB")
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    img_b64 = base64.b64encode(buffered.getvalue()).decode()
    await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
    resp = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role":"system","content":"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –û—Ç–≤–µ—Ç—å —Å–ø–∏—Å–∫–æ–º: 1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥..."},
            {"role":"user","content":[{"type":"image_url","image_url":{"url":f"data:image/jpeg;base64,{img_b64}"}},{"type":"text","text":"–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?"}]}
        ],
        temperature=0.2, max_tokens=250
    )
    text = resp.choices[0].message.content
    name = re.search(r"1\.\s*(.+)", text)
    cal = re.search(r"(\d+)[^\d]*–∫–∫–∞–ª", text.lower())
    prot = re.search(r"–±–µ–ª–∫.*?(\d+)", text.lower())
    fat = re.search(r"–∂–∏—Ä.*?(\d+)", text.lower())
    carb = re.search(r"—É–≥–ª–µ–≤–æ–¥.*?(\d+)", text.lower())
    data = {"dish": name.group(1).strip() if name else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ",
            "cal": int(cal.group(1)) if cal else 0,
            "prot": int(prot.group(1)) if prot else 0,
            "fat": int(fat.group(1)) if fat else 0,
            "carb": int(carb.group(1)) if carb else 0}
    last_meal[uid] = data
    await update.message.reply_text(
        f"üçΩ –ë–ª—é–¥–æ: {data['dish']}\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {data['cal']} –∫–∫–∞–ª / 100 –≥\n"
        f"ü•© –ë–µ–ª–∫–∏: {data['prot']} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {data['fat']} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {data['carb']} –≥\n\n"
        f"–ï—Å–ª–∏ –∑–Ω–∞–µ—à—å –≤–µ—Å ‚Äî –Ω–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ —Ü–∏—Ñ—Ä–æ–π (–≥—Ä–∞–º–º)."
    )

async def handle_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in last_meal or not update.message.text.isdigit():
        return
    weight = int(update.message.text)
    meal = last_meal[uid]
    norm = user_profiles.get(uid, {}).get("norma", {})
    cal = scale(meal['cal'], weight)
    prot = scale(meal['prot'], weight)
    fat = scale(meal['fat'], weight)
    carb = scale(meal['carb'], weight)
    pct = lambda v,k: round(v/k*100,1) if k else 0
    comments = []
    goal = user_profiles.get(uid, {}).get('profile', {}).get('goal','').lower()
    if norm:
        if pct(fat, norm['fat'])>40 and '–ø–æ—Ö—É–¥' in goal:
            comments.append('–ú–Ω–æ–≥–æ –∂–∏—Ä–æ–≤ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è')
    await update.message.reply_text(
        f"üçΩ {meal['dish']} ‚Äî {weight} –≥\n"
        f"üî• {cal} –∫–∫–∞–ª ({pct(cal,norm.get('cal'))}%)\n"
        f"ü•© {prot} –≥ ({pct(prot,norm.get('protein'))}%)\n"
        f"ü•ë {fat} –≥ ({pct(fat,norm.get('fat'))}%)\n"
        f"üçû {carb} –≥ ({pct(carb,norm.get('carb'))}%)\n\n"
        + ('\n'.join(comments) if comments else '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
    )

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GENDER:[MessageHandler(filters.TEXT & ~filters.COMMAND, gender)],
            AGE:[MessageHandler(filters.TEXT & ~filters.COMMAND, age)],
            HEIGHT:[MessageHandler(filters.TEXT & ~filters.COMMAND, height)],
            WEIGHT:[MessageHandler(filters.TEXT & ~filters.COMMAND, weight)],
            WAIST:[MessageHandler(filters.TEXT & ~filters.COMMAND, waist)],
            HIPS:[MessageHandler(filters.TEXT & ~filters.COMMAND, hips)],
            ACTIVITY:[MessageHandler(filters.TEXT & ~filters.COMMAND, activity)],
            HABITS:[MessageHandler(filters.TEXT & ~filters.COMMAND, habits)],
            GOAL:[MessageHandler(filters.TEXT & ~filters.COMMAND, goal)],
            DIET:[MessageHandler(filters.TEXT & ~filters.COMMAND, diet)]
        },
        fallbacks=[]
    )
    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_weight))
    print('‚úÖ GPT Vision –±–æ—Ç —Å –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º –∑–∞–ø—É—â–µ–Ω...')
    app.run_polling()

if __name__=='__main__':
    main()
