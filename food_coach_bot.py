import os
import io
import re
import base64

from PIL import Image
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import openai

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
load_dotenv()
TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN")
openai.api_key  = os.getenv("OPENAI_API_KEY")

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é, —á—Ç–æ —ç—Ç–æ, "
        "–∞ —Ç–∞–∫–∂–µ —É–∫–∞–∂—É –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥."
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–∞–º—è—Ç—å
    photo = update.message.photo[-1]
    fobj  = await photo.get_file()
    bio   = io.BytesIO()
    await fobj.download_to_memory(out=bio)

    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    image   = Image.open(bio).convert("RGB")
    buffer  = io.BytesIO()
    image.save(buffer, format="JPEG")
    img_b64 = base64.b64encode(buffer.getvalue()).decode()

    await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")

    # –í—ã–∑—ã–≤–∞–µ–º GPT Vision —á–µ—Ä–µ–∑ chat.completions
    resp = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role":"system","content":
             "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ö—Ä–∞—Ç–∫–æ –æ—Ç–≤–µ—Ç—å –ø–æ —à–∞–±–ª–æ–Ω—É:\n"
             "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
             "2. –ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥\n"
             "3. –ë–µ–ª–∫–∏, –ñ–∏—Ä—ã, –£–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥\n"
             "–ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
            {"role":"user","content":[
                {"type":"image_url","image_url":{"url":f"data:image/jpeg;base64,{img_b64}"}},
                {"type":"text","text":"–ß—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ?"}
            ]}
        ],
        temperature=0.2,
        max_tokens=250
    )

    text = resp.choices[0].message.content

    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —Ä–µ–≥—É–ª—è—Ä–∫–∞–º–∏
    name = re.search(r"1\.\s*(.+)", text)
    cal  = re.search(r"(\d+)[^\d]*–∫–∫–∞–ª", text.lower())
    prot = re.search(r"–±–µ–ª–∫.*?(\d+)", text.lower())
    fat  = re.search(r"–∂–∏—Ä.*?(\d+)", text.lower())
    carb = re.search(r"—É–≥–ª–µ–≤–æ–¥.*?(\d+)", text.lower())

    dish  = name.group(1).strip() if name else "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    cal   = cal and cal.group(1) or "‚Äî"
    prot  = prot and prot.group(1) or "‚Äî"
    fat   = fat and fat.group(1) or "‚Äî"
    carb  = carb and carb.group(1) or "‚Äî"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        f"üçΩ –ë–ª—é–¥–æ: {dish}\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {cal} –∫–∫–∞–ª / 100 –≥\n"
        f"ü•© –ë–µ–ª–∫–∏: {prot} –≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {fat} –≥\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {carb} –≥"
    )

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    print("‚úÖ Food-Bot –∑–∞–ø—É—â–µ–Ω‚Ä¶")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
