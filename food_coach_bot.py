import os
import io
import base64
from PIL import Image
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –ö–ë–ñ–£ –Ω–∞ 100 –≥."
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]
    file = await photo.get_file()
    bio = io.BytesIO()
    await file.download_to_memory(out=bio)
    bio.seek(0)

    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ GPT Vision
    image = Image.open(bio).convert("RGB")
    buffered = io.BytesIO()
    image.save(buffered, format="JPEG")
    img_b64 = base64.b64encode(buffered.getvalue()).decode()

    await update.message.reply_text("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏.")

    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI GPT Vision
    resp = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[
            {"role":"system","content":"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π –∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã –Ω–∞ 100 –≥—Ä–∞–º–º."},
            {"role":"user","content":[
                {"type":"image_url","image_url":{"url":f"data:image/jpeg;base64,{img_b64}"}},
                {"type":"text","text":"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ë–ª—é–¥–æ: <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n–ö–∞–ª–æ—Ä–∏–∏: <—á–∏—Å–ª–æ> –∫–∫–∞–ª\n–ë–µ–ª–∫–∏: <—á–∏—Å–ª–æ> –≥\n–ñ–∏—Ä—ã: <—á–∏—Å–ª–æ> –≥\n–£–≥–ª–µ–≤–æ–¥—ã: <—á–∏—Å–ª–æ> –≥"}
            ]}
        ],
        temperature=0.1,
        max_tokens=200
    )

    text = resp.choices[0].message.content.strip()
    await update.message.reply_text(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{text}")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É Start
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    print("‚úÖ Photo Macro Bot –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
